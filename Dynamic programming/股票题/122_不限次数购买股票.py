"""
股票题定义两种状态， 假设它的本金为0
状态一：把股票卖了钱在手的状态， 假设没买股票， 那么状态0就一直会保持0
状态二：股票在手的状态， 即花钱买了股票

初始状态：
状态一的初始状态即钱在手的初始状态不存在， 因为没有股票可卖， 就把他定义为0
状态二的初始状态即股票在手的状态，股票在手的初始状态即花钱买了第一天的股票

状态转换：
状态一可能有两种方式：第一种即维持前一天的状态， 第二种， 把前一天的股票买了挣钱
状态二可能有三种， 第一种， 维持前一天的状态， 第二种即拿前一天的钱买股票， 第三种即前面都没买过股票， 今天第一天买
"""

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        dp = [[0,0] for _ in range(len(prices))]
        dp[0][1] = -prices[0]

        for i in range(1, len(prices)):
            dp[i][0] = max(dp[i-1][0], dp[i-1][1]+prices[i])
            dp[i][1] = max(dp[i-1][1], dp[i-1][0]-prices[i], -prices[i]) ## dp[i-1][0]一定大于等于0， 所以可以把-prices[i]删除掉

        return dp[-1][0]
